# Author: Abbad49606a

import re
import scrapy
import urllib
from scrapy.http import FormRequest
from python_spiders.helper import format_date
from ..loaders import ListingLoader 


class CharlesHenryPeppiattSpider(scrapy.Spider):
    name = 'charles_henry_peppiatt'
    execution_type='testing'
    country='united_kingdom'
    locale='en'

    start_urls = ["https://www.ch-p.co.uk/properties.aspx?mode=1&showsearch=1&menuID=4"]
    current_page = 1

    form_data = {
        '__EVENTTARGET': 'ctl00$ContentPlaceHolderMain$repPages$ctl01$lnkPage',
        '__EVENTARGUMENT': '',
        '__LASTFOCUS': '',
        '__VIEWSTATE': '',
        '__VIEWSTATEGENERATOR': '050B8BD0',
        '__EVENTVALIDATION': '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',
        'ctl00$ContentPlaceHolderMain$uctPropertySearch$txtSearch': '',
        'ctl00$ContentPlaceHolderMain$uctPropertySearch$cboPropertyTypeGroup': 'All Residential',
        'ctl00$ContentPlaceHolderMain$uctPropertySearch$cboCategory': 'For Rent',
        'ctl00$ContentPlaceHolderMain$uctPropertySearch$cboBedrooms': '0',
        'ctl00$ContentPlaceHolderMain$uctPropertySearch$cboMinPrice': '0',
        'ctl00$ContentPlaceHolderMain$uctPropertySearch$cboMaxPrice': '0',
        'ctl00$ContentPlaceHolderMain$uctPropertySearch$cboStatus': 'Show All',
        'ctl00$ContentPlaceHolderMain$lstSort': 'Sort Lowest Price',
        'ctl00$ContentPlaceHolderMain$cboPageNos': 'Page 1 of 5',
    }

    def parse(self, response):
        for listing in response.xpath("//a[contains(.,'Detail')]/@href").extract():
            yield scrapy.Request(response.urljoin(listing), callback=self.get_info)

        self.current_page += 1
        total_pages = response.xpath("//div[@class='pagination']/ul[2]/li//text()").extract()
        if total_pages:
            if self.current_page <= int(total_pages[-1]):
                self.form_data['ctl00$ContentPlaceHolderMain$cboPageNos'] = f"Page {str(self.current_page - 1)} of {str(total_pages)}"
                yield FormRequest(self.start_urls[0], callback=self.parse, formdata=self.form_data)

    def get_info(self, response):
        item_loader = ListingLoader(response=response)
        item_loader.add_value("external_link", response.url)
        item_loader.add_value("external_id", response.css("#ctl00_ContentPlaceHolderMain_lblPropertyID::text").get())
        item_loader.add_value("external_source", f"{''.join(self.name.split('_'))}_PySpider_{self.country}_{self.locale}")
        item_loader.add_value("title", response.css("title::text").get())
        description =  "\n".join(response.css("#ctl00_ContentPlaceHolderMain_lblPropertyMainDescription::text").extract())
        item_loader.add_value("description", description.strip())
        address = response.css("#banner-title::text").get().strip()
        item_loader.add_value("city", address.split(",")[-2].strip())
        item_loader.add_value("zipcode", address.split(" ")[-1].strip())
        item_loader.add_value("address", address)
        coordinates = urllib.parse.parse_qs(response.css("iframe::attr(src)").get().split("?")[-1])["cbll"][0].split(",")
        item_loader.add_value("latitude", coordinates[0])
        item_loader.add_value("longitude", coordinates[1])
        features = response.css(".amenities li")
        property_type = features.css("span::text").get().lower()
        if "house" in property_type:
            item_loader.add_value("property_type", "house")
        elif "apartment" in property_type or "flat" in property_type:
            item_loader.add_value("property_type", "apartment")
        elif "studio" in property_type or "office" in property_type:
            item_loader.add_value("property_type", "studio")
        elif "room" in property_type:
            item_loader.add_value("property_type", "room")
        features = {k: i.strip() for i, k in zip([i for i in response.css(".amenities li::text").extract() if i.strip()], response.css(".amenities i::attr(class)").extract()[1:])}
        for k, v in features.items():
            if k == "icon-area":
                item_loader.add_value("square_meters", int(v.split("/")[0].strip("m²")))
            elif k == "icon-bedrooms":
                item_loader.add_value("room_count", int(v))
            elif k == "icon-bathrooms":
                item_loader.add_value("bathroom_count", int(v))
        images = response.css("#property-detail-large img::attr(src)").extract()
        floor_plan_images = response.css("#tabFloorPlan img::attr(src)").extract()
        item_loader.add_value("images", images)
        item_loader.add_value("external_images_count", len(images) + len(floor_plan_images))
        if floor_plan_images:
            item_loader.add_value("floor_plan_images", floor_plan_images)
        rent_date_furnished = response.css("h2::text").get().split("-")
        furnished = rent_date_furnished[-1].strip()
        if furnished  == "Furnished":
            item_loader.add_value("furnished", True)
        elif furnished == "unfurnished":
            item_loader.add_value("furnished", False)
        item_loader.add_value("available_date", format_date(rent_date_furnished[1].split()[-1].strip(), '%Y-%m-%d'))
        item_loader.add_value("rent", re.sub(r"[^\d]", "", rent_date_furnished[0]))
        item_loader.add_value("currency", "GBP")
        item_loader.add_value("landlord_name", self.name)
        item_loader.add_value("landlord_email", "info@ch-p.co.uk")
        item_loader.add_value("landlord_phone", "0208 175 5444")
        yield item_loader.load_item()